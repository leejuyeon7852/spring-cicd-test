name: EC2 Deploy

on:
  push:
    branches: ["main"] # main 브랜치에 push 했을 때 배포

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 소스코드 체크
      - name: Checkout 
        uses: actions/checkout@v3

      # JDK 설치
      - name: Set up JDK 21 
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # build 권한 부여
      - name: Grant execute permission for gradlew 
        run: chmod +x gradlew

      # gradle 캐싱 - 속도 높이기
      - name: Cache Gradle packages 
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
        
      - name: Build with Gradle 
        run: ./gradlew clean build -x test

      - name: Build Docker Image 
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-cicd-test:latest .

      - name: Login Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKER_USERNAME }}/spring-cicd-test:latest

      # EC2 접속 & 배포 
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 최신 코드 가져오기
            if [ ! -d "spring-cicd-test" ]; then
              git clone https://github.com/${{ github.repository }}.git
            else
              cd spring-cicd-test
              git reset --hard
              git pull origin main
            fi

            cd ~/spring-cicd-test

            # 컨테이너 재배포
            docker-compose down
            docker-compose pull
            docker-compose up -d --build
        
